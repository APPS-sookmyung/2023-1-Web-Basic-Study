# React study 1주차

### [1. React 장점]

- 초기 react 는 안정적이지 못했음. 하지만 점점 대기업이 사용하면서 이제는 최고의 툴이 됨
- 누가 이걸 사용하는가? : 세계적으로 유명한 웹사이트들이 react 를 이용하여 개발하고 있음.
- react j.s 는 페이스북이 만들었음(+ 지금까지도 투자중). 따라서 망할 일 없음
- 거의 java script 와 유사함. 그래서 community 가 방대함

---

### [2. 문제]

- interactive UI 를 구성하는데 훨씬 효율적임
- 1 버튼 1텍스트 → 버튼 누를떄마다 텍스트를 업데이트해서 클릭수를 수정하려고 함
- 버튼을 자바스크립트로부터 가지고 와서, EventListener 사용해야함. (일일이 찾아야함)
- 숏코드를 만들었음 ( react 가 )

---

### [React 기본 설정]

- React 사용하기 위해서는
    
    ```
    <script src="https://unpkg.com/react@17.0.2/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@17.0.2/umd/react-dom.production.min.js"></script>
    ```
    
    먼저, 두개의 script 태그를 작성해줘야함.( react 를 import)
    
- 그리고 그 이후부터는 script 에 React 자유롭게 사용가능

---

### [React 의 규칙(정석버전)]

- html body 태그 이용안하고, 모든 걸 javascript 사용해서 만듬. ( 요소를 만들 때 )
- react js: 엔진
- react-dom: 모든 react element 을 실제로 body 태그에 넣을 수 있도록 연결해주는 역할.
    - ReactDOM.render() 메서드를 사용해서 이를 구현함.
- +. 요소의 property 는? : class name 이나 id 같은것
- html 같은 칸에서 만들고 자동으로 업데이트 되도록 만들 수 있음
- 핵심: js 가 요소들을 만들고, react 가 이를 html 로 번역

---

property 에다가 **eventListener** / id / class 등이 들어갈 수 있음. 

 createElement , choose tag, eventListener 을 한 코드 안에서 다 해결 가

---

[데이터 업데이트] ( 업데이트: re - rendering with new value )

→ ‘render’ function 만들어서 구현 

React element 를 더 간단하게 만드는 방법..!!

JSA:  자바 스크립트인데 html 같이 생김.

Babel : 번역기같은 역할임. → JSX 사용할 수 있도록 <script type="text/babel"> 이랑 import 해줘야

---

<추가>

arrow function !

function Title()  {} 대신에 const Title=() ⇒ ( 함수 내용 )  형식으로 하면 됨.

요소들을 함수로 만들어줄때는 꼭 return 문 내부에 함수 내용 담기도록..

html 처러 

---

### <state>

변하는 데이터를 저장할 때 사용한다.

1. 비선호 하는 방식 ( dirtyState.html 코드 참고 )
2. 선호되는 방식 ( cleanState.html 코드 참고 )
3. **state 에 변화가 생기면 re 랜더링이 발생한다.**
4. state 작성법 2가지 설명 ( 더안전한 방법: 함수 사용 ) ; changeState.html 코드 참고 
- state 을 지원하는 react 가 좋은 이유:
    - 사용자로부터 변화가 있을때마다 함수를 다시 실행 ( new 하게 실행 )
        
        여기서 React js 는 UI 만 신경쓰고, 실제 html태그들을 변화시키지는 않음. (전체를 생성하는게 아니라 바뀌는 부분을 교체( partly recreate )
        
    - (우리가 바꾼 부분만 react 가 체크할 수 있음 ) ⇒ 매우 interactive

---

### <Re rendering> : 업데이트(state 사용해서 깔끔하게 구현

- rerendering 하는 좋은방법 : 자동으로 rerendering  ( 사용자에게 UI 보이기 위해 )
    - **const [counter, modifier]=React.useState(0); 코드 사용 + 내부에 modifier 에 사용될 함수 정의**
- 변하는 데이터 → 변수말고 , data 를 function 안에 해줌
- 해당 코드 사용하면,  [a,f] 형태의 원소 2개 배열을 만들어줌
    - a: 초기값 , f: a를 변화시킬 함수
    - 이전에, 변수 선언하고, function 정의 할거를 코드 한개로 처리 가능

---

### < 배열의 각 요소에 특정 이름 붙이기 ( 인덱스 말고 다르게 접근할 수 있도록 ) >

```html
const food=["tomato", "potato"]
const [firstOne, secondOne]= food;
이러면 이제 food[0] 대신 firstOne 으로 접근가능
```

- **const [counter, modifier]=React.useState(0);** 여기서 , modifier 은 새로 갱신된 counter 값을 가지고 re 랜더링 시켜주는 역할을 한다.

---

### <Unit conversion (단위 변환) 예제>

- react 는 fake event 를 만든다. ( event 최적화를 하기 위해서 )
- target: 막 바뀐 input 값

```
const [minutes, setMinutes] = React.useState(); // input value 받아와야 해서 
        //useState 뒤에다가 function 작성하는 습관
        const onChange = (event) => {
            setMinutes(event.target.value);
        };
```

- [event.target](http://event.target).value 라고 작성 → console 상황 보고 판단

---

+스타일 태그도 div 태그 내부에 들어가는 요소로 치는구나...
